{"name": "test_shopping[TC_5-error_user-secret_sauce-Pass-Test.allTheThings() T-Shirt (Red), Sauce Labs Onesie-None-Alex-Smith-24309-Pass]", "status": "failed", "statusDetails": {"message": "Failed: The expected outcome was not achieved", "trace": "setup_browser = <selenium.webdriver.remote.webdriver.WebDriver (session=\"1f75260a80db724b7ca6bd57fce940f1744d2059\")>, log = <Logger Login Test (DEBUG)>, tc_id = 'TC_5'\nname = 'error_user', password = 'secret_sauce', expected = 'Pass', addItems = 'Test.allTheThings() T-Shirt (Red), Sauce Labs Onesie', removeItems = None\nfirstName = 'Alex', lastName = 'Smith', PostalCode = 24309, ExpectedAction = 'Pass'\n\n    @allure.feature(\"Shopping functionality\")\n    @allure.story(\"Shopping in the site with valid and invalid operations\")\n    @allure.severity(allure.severity_level.CRITICAL)\n    @pytest.mark.parametrize(\"tc_id, name, password, expected, addItems, removeItems, firstName, lastName, PostalCode, ExpectedAction\", getTestData())\n    def test_shopping(setup_browser, log, tc_id, name, password, expected, addItems, removeItems, firstName, lastName, PostalCode, ExpectedAction):\n        log.info(\"Executing \"+ tc_id + \" with \" + xstr(name) + \" as username and \" + xstr(password) + \" as password in \"+ browserType +\" browser...\" )\n    \n        with allure.step(\"Step 1: Open the browser and navigate to required site\"):\n            driver = setup_browser\n            log.info(\"Starting browser session...\")\n    \n        with allure.step(\"Step 2: Enter the login credentials from test data\"):\n            shopping = CheckoutPage(driver)\n            log.info(\"Entering login credentials...\")\n            allure.attach(f\"Username: {xstr(name)}\", name=\"Username\", attachment_type=allure.attachment_type.TEXT)\n            allure.attach(f\"Password: {xstr(password)}\", name=\"Password\", attachment_type=allure.attachment_type.TEXT)\n            shopping.login(xstr(name), xstr(password))\n            sleep(sleepTime)\n    \n        with allure.step(\"Step 3: Validate the login and capture error message incase of invalid credentials\"):\n            log.info(\"Validating login...\")\n            result = shopping.validatelogin()\n            if result == \"Pass\":\n                log.info(\"Logged in successfully\")\n            else:\n                log.error(shopping.getErrorText())\n            log.info(\"Login Check performed successfully...\")\n    \n        with allure.step(\"Step 4: Add items to the cart in case of successful login\"):\n            try:\n                assert expected == result\n                if result == \"Pass\":\n                    log.info(\"Adding required items to cart..\")\n                    itemsToAdd = xstr(addItems).split(\", \")\n                    itemsToRemove = xstr(removeItems).split(\", \")\n                    totalItems = len(itemsToAdd) - len(itemsToRemove)\n                    for item in itemsToAdd:\n                        sleep(sleepTime)\n                        log.info(\"Adding \"+ item +\" to cart..\")\n                        shopping.addItem(item)\n                    with allure.step(\"Step 5: Proceed to the cart and remove items as per test data\"):\n                        log.info(\"Proceeding to cart..\")\n                        shopping.proceedToCart()\n                        for item in itemsToRemove:\n                            sleep(sleepTime)\n                            log.info(\"Removing \"+ item +\" from cart..\")\n                            shopping.removeItem(item)\n                    with allure.step(\"Step 6: Verify if correct items are present in the cart\"):\n                        log.info(\"Checking if all the required items are added and removed as expected...\")\n                        if not shopping.validateCartItems(totalItems):\n                            log.error(\"Items in the cart doesn't match the expected items\")\n                            raise AssertionError(\"The shopping items do not match the expected list...\")\n                    with allure.step(\"Step 7: Proceed to checkout and enter the required details\"):\n                        shopping.proceedToCheckout()\n                        log.info(\"Proceeding to checkout..\")\n                        log.info(\"Entering form details..\")\n                        sleep(sleepTime)\n                        shopping.formSubmit(xstr(firstName), xstr(lastName), xstr(PostalCode))\n                    with allure.step(\"Step 8: Verify if the form details are valid\"):\n                        formResult = shopping.validateForm()\n                        if formResult == \"Pass\":\n                            log.info(\"Completing the transaction...\")\n                        else:\n                            log.error(shopping.getErrorText())\n                        try:\n                            assert ExpectedAction == formResult\n                            with allure.step(\"Step 9: Proceed to transaction page and finish shopping\"):\n                                if formResult == \"Pass\":\n                                    sleep(sleepTime)\n                                    shopping.finishShopping()\n                                    with allure.step(\"Step 10: Verify if the shopping is completed\"):\n                                        sleep(sleepTime)\n                                        shoppingResult = shopping.validateShopping()\n                                        if shoppingResult == \"Pass\":\n                                            log.info(\"Shopping completed successfully...\")\n                                        else:\n                                            log.error(\"Shopping is terminated...\")\n>                                           raise AssertionError(\"The expected outcome was not achieved\")\nE                                           AssertionError: The expected outcome was not achieved\n\ntest_cases\\test_shopping.py:96: AssertionError\n\nDuring handling of the above exception, another exception occurred:\n\nsetup_browser = <selenium.webdriver.remote.webdriver.WebDriver (session=\"1f75260a80db724b7ca6bd57fce940f1744d2059\")>, log = <Logger Login Test (DEBUG)>, tc_id = 'TC_5'\nname = 'error_user', password = 'secret_sauce', expected = 'Pass', addItems = 'Test.allTheThings() T-Shirt (Red), Sauce Labs Onesie', removeItems = None\nfirstName = 'Alex', lastName = 'Smith', PostalCode = 24309, ExpectedAction = 'Pass'\n\n    @allure.feature(\"Shopping functionality\")\n    @allure.story(\"Shopping in the site with valid and invalid operations\")\n    @allure.severity(allure.severity_level.CRITICAL)\n    @pytest.mark.parametrize(\"tc_id, name, password, expected, addItems, removeItems, firstName, lastName, PostalCode, ExpectedAction\", getTestData())\n    def test_shopping(setup_browser, log, tc_id, name, password, expected, addItems, removeItems, firstName, lastName, PostalCode, ExpectedAction):\n        log.info(\"Executing \"+ tc_id + \" with \" + xstr(name) + \" as username and \" + xstr(password) + \" as password in \"+ browserType +\" browser...\" )\n    \n        with allure.step(\"Step 1: Open the browser and navigate to required site\"):\n            driver = setup_browser\n            log.info(\"Starting browser session...\")\n    \n        with allure.step(\"Step 2: Enter the login credentials from test data\"):\n            shopping = CheckoutPage(driver)\n            log.info(\"Entering login credentials...\")\n            allure.attach(f\"Username: {xstr(name)}\", name=\"Username\", attachment_type=allure.attachment_type.TEXT)\n            allure.attach(f\"Password: {xstr(password)}\", name=\"Password\", attachment_type=allure.attachment_type.TEXT)\n            shopping.login(xstr(name), xstr(password))\n            sleep(sleepTime)\n    \n        with allure.step(\"Step 3: Validate the login and capture error message incase of invalid credentials\"):\n            log.info(\"Validating login...\")\n            result = shopping.validatelogin()\n            if result == \"Pass\":\n                log.info(\"Logged in successfully\")\n            else:\n                log.error(shopping.getErrorText())\n            log.info(\"Login Check performed successfully...\")\n    \n        with allure.step(\"Step 4: Add items to the cart in case of successful login\"):\n            try:\n                assert expected == result\n                if result == \"Pass\":\n                    log.info(\"Adding required items to cart..\")\n                    itemsToAdd = xstr(addItems).split(\", \")\n                    itemsToRemove = xstr(removeItems).split(\", \")\n                    totalItems = len(itemsToAdd) - len(itemsToRemove)\n                    for item in itemsToAdd:\n                        sleep(sleepTime)\n                        log.info(\"Adding \"+ item +\" to cart..\")\n                        shopping.addItem(item)\n                    with allure.step(\"Step 5: Proceed to the cart and remove items as per test data\"):\n                        log.info(\"Proceeding to cart..\")\n                        shopping.proceedToCart()\n                        for item in itemsToRemove:\n                            sleep(sleepTime)\n                            log.info(\"Removing \"+ item +\" from cart..\")\n                            shopping.removeItem(item)\n                    with allure.step(\"Step 6: Verify if correct items are present in the cart\"):\n                        log.info(\"Checking if all the required items are added and removed as expected...\")\n                        if not shopping.validateCartItems(totalItems):\n                            log.error(\"Items in the cart doesn't match the expected items\")\n                            raise AssertionError(\"The shopping items do not match the expected list...\")\n                    with allure.step(\"Step 7: Proceed to checkout and enter the required details\"):\n                        shopping.proceedToCheckout()\n                        log.info(\"Proceeding to checkout..\")\n                        log.info(\"Entering form details..\")\n                        sleep(sleepTime)\n                        shopping.formSubmit(xstr(firstName), xstr(lastName), xstr(PostalCode))\n                    with allure.step(\"Step 8: Verify if the form details are valid\"):\n                        formResult = shopping.validateForm()\n                        if formResult == \"Pass\":\n                            log.info(\"Completing the transaction...\")\n                        else:\n                            log.error(shopping.getErrorText())\n                        try:\n                            assert ExpectedAction == formResult\n                            with allure.step(\"Step 9: Proceed to transaction page and finish shopping\"):\n                                if formResult == \"Pass\":\n                                    sleep(sleepTime)\n                                    shopping.finishShopping()\n                                    with allure.step(\"Step 10: Verify if the shopping is completed\"):\n                                        sleep(sleepTime)\n                                        shoppingResult = shopping.validateShopping()\n                                        if shoppingResult == \"Pass\":\n                                            log.info(\"Shopping completed successfully...\")\n                                        else:\n                                            log.error(\"Shopping is terminated...\")\n                                            raise AssertionError(\"The expected outcome was not achieved\")\n                        except Exception as e:\n                            log.error(\"The process did not complete as expected...\"+ str(e))\n>                           pytest.fail(str(e))\nE                           Failed: The expected outcome was not achieved\n\ntest_cases\\test_shopping.py:99: Failed"}, "steps": [{"name": "Step 1: Open the browser and navigate to required site", "status": "passed", "start": 1737222884928, "stop": 1737222884931}, {"name": "Step 2: Enter the login credentials from test data", "status": "passed", "attachments": [{"name": "Username", "source": "bfb4bdf3-8ad1-48fc-8395-dfd3d4995f24-attachment.txt", "type": "text/plain"}, {"name": "Password", "source": "5ab06279-d2b5-4292-bb07-e5b591cd1a14-attachment.txt", "type": "text/plain"}], "start": 1737222884931, "stop": 1737222889305}, {"name": "Step 3: Validate the login and capture error message incase of invalid credentials", "status": "passed", "start": 1737222889305, "stop": 1737222889373}, {"name": "Step 4: Add items to the cart in case of successful login", "status": "failed", "statusDetails": {"message": "Failed: The expected outcome was not achieved\n", "trace": "  File \"D:\\Selenium Practices\\Week 8\\test_cases\\test_shopping.py\", line 99, in test_shopping\n    pytest.fail(str(e))\n    ~~~~~~~~~~~^^^^^^^^\n  File \"C:\\Users\\Jarvis\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\_pytest\\outcomes.py\", line 178, in fail\n    raise Failed(msg=reason, pytrace=pytrace)\n"}, "steps": [{"name": "Step 5: Proceed to the cart and remove items as per test data", "status": "passed", "start": 1737222896264, "stop": 1737222909801}, {"name": "Step 6: Verify if correct items are present in the cart", "status": "passed", "start": 1737222909801, "stop": 1737222909868}, {"name": "Step 7: Proceed to checkout and enter the required details", "status": "passed", "start": 1737222909868, "stop": 1737222914371}, {"name": "Step 8: Verify if the form details are valid", "status": "failed", "statusDetails": {"message": "Failed: The expected outcome was not achieved\n", "trace": "  File \"D:\\Selenium Practices\\Week 8\\test_cases\\test_shopping.py\", line 99, in test_shopping\n    pytest.fail(str(e))\n    ~~~~~~~~~~~^^^^^^^^\n  File \"C:\\Users\\Jarvis\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\_pytest\\outcomes.py\", line 178, in fail\n    raise Failed(msg=reason, pytrace=pytrace)\n"}, "steps": [{"name": "Step 9: Proceed to transaction page and finish shopping", "status": "failed", "statusDetails": {"message": "AssertionError: The expected outcome was not achieved\n", "trace": "  File \"D:\\Selenium Practices\\Week 8\\test_cases\\test_shopping.py\", line 96, in test_shopping\n    raise AssertionError(\"The expected outcome was not achieved\")\n"}, "steps": [{"name": "Step 10: Verify if the shopping is completed", "status": "failed", "statusDetails": {"message": "AssertionError: The expected outcome was not achieved\n", "trace": "  File \"D:\\Selenium Practices\\Week 8\\test_cases\\test_shopping.py\", line 96, in test_shopping\n    raise AssertionError(\"The expected outcome was not achieved\")\n"}, "start": 1737222917791, "stop": 1737222930916}], "start": 1737222914456, "stop": 1737222930917}], "start": 1737222914371, "stop": 1737222930919}], "start": 1737222889373, "stop": 1737222930922}], "attachments": [{"name": "log", "source": "984c6437-3819-4432-8dfe-4063c749de84-attachment.txt", "type": "text/plain"}, {"name": "stderr", "source": "e379f080-6064-4a32-81e8-e09dbfc9e4b0-attachment.txt", "type": "text/plain"}], "parameters": [{"name": "tc_id", "value": "'TC_5'"}, {"name": "name", "value": "'error_user'"}, {"name": "password", "value": "'secret_sauce'"}, {"name": "expected", "value": "'Pass'"}, {"name": "addItems", "value": "'Test.allTheThings() T-Shirt (Red), Sauce Labs Onesie'"}, {"name": "removeItems", "value": "None"}, {"name": "firstName", "value": "'Alex'"}, {"name": "lastName", "value": "'Smith'"}, {"name": "PostalCode", "value": "24309"}, {"name": "ExpectedAction", "value": "'Pass'"}], "start": 1737222884925, "stop": 1737222930923, "uuid": "f517e8bb-d5d6-46f9-aaef-9ad3b55bdf55", "historyId": "327d08eb40fcf52e1da2e3707d2b91b4", "testCaseId": "625b2149237d74635ca703cd21db7595", "fullName": "test_cases.test_shopping#test_shopping", "labels": [{"name": "feature", "value": "Shopping functionality"}, {"name": "severity", "value": "critical"}, {"name": "story", "value": "Shopping in the site with valid and invalid operations"}, {"name": "parentSuite", "value": "test_cases"}, {"name": "suite", "value": "test_shopping"}, {"name": "host", "value": "Jarvis"}, {"name": "thread", "value": "14804-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test_cases.test_shopping"}]}