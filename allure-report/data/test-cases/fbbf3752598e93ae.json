{"uid":"fbbf3752598e93ae","name":"test_shopping[TC_5-error_user-secret_sauce-Pass-Test.allTheThings() T-Shirt (Red), Sauce Labs Onesie-None-Alex-Smith-24309-Pass]","fullName":"test_cases.test_shopping#test_shopping","historyId":"327d08eb40fcf52e1da2e3707d2b91b4","time":{"start":1737225747149,"stop":1737225790946,"duration":43797},"status":"failed","statusMessage":"Failed: The expected outcome was not achieved","statusTrace":"setup_browser = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"11d1f570a57f0d6831d3d76f82ca200f\")>, log = <Logger Login Test (DEBUG)>, tc_id = 'TC_5'\nname = 'error_user', password = 'secret_sauce', expected = 'Pass', addItems = 'Test.allTheThings() T-Shirt (Red), Sauce Labs Onesie', removeItems = None\nfirstName = 'Alex', lastName = 'Smith', PostalCode = 24309, ExpectedAction = 'Pass'\n\n    @allure.feature(\"Shopping functionality\")\n    @allure.story(\"Shopping in the site with valid and invalid operations\")\n    @allure.severity(allure.severity_level.CRITICAL)\n    @pytest.mark.parametrize(\"tc_id, name, password, expected, addItems, removeItems, firstName, lastName, PostalCode, ExpectedAction\", getTestData())\n    def test_shopping(setup_browser, log, tc_id, name, password, expected, addItems, removeItems, firstName, lastName, PostalCode, ExpectedAction):\n        log.info(\"Executing \"+ tc_id + \" with \" + xstr(name) + \" as username and \" + xstr(password) + \" as password in \"+ browserType +\" browser...\" )\n    \n        with allure.step(\"Step 1: Open the browser and navigate to required site\"):\n            driver = setup_browser\n            log.info(\"Starting browser session...\")\n    \n        with allure.step(\"Step 2: Enter the login credentials from test data\"):\n            shopping = CheckoutPage(driver)\n            log.info(\"Entering login credentials...\")\n            allure.attach(f\"Username: {xstr(name)}\", name=\"Username\", attachment_type=allure.attachment_type.TEXT)\n            allure.attach(f\"Password: {xstr(password)}\", name=\"Password\", attachment_type=allure.attachment_type.TEXT)\n            shopping.login(xstr(name), xstr(password))\n            sleep(sleepTime)\n    \n        with allure.step(\"Step 3: Validate the login and capture error message incase of invalid credentials\"):\n            log.info(\"Validating login...\")\n            result = shopping.validatelogin()\n            if result == \"Pass\":\n                log.info(\"Logged in successfully\")\n            else:\n                log.error(shopping.getErrorText())\n            log.info(\"Login Check performed successfully...\")\n    \n        with allure.step(\"Step 4: Add items to the cart in case of successful login\"):\n            try:\n                assert expected == result\n                if result == \"Pass\":\n                    log.info(\"Adding required items to cart..\")\n                    itemsToAdd = xstr(addItems).split(\", \")\n                    itemsToRemove = xstr(removeItems).split(\", \")\n                    totalItems = len(itemsToAdd) - len(itemsToRemove)\n                    for item in itemsToAdd:\n                        sleep(sleepTime)\n                        log.info(\"Adding \"+ item +\" to cart..\")\n                        shopping.addItem(item)\n                    with allure.step(\"Step 5: Proceed to the cart and remove items as per test data\"):\n                        log.info(\"Proceeding to cart..\")\n                        shopping.proceedToCart()\n                        for item in itemsToRemove:\n                            sleep(sleepTime)\n                            log.info(\"Removing \"+ item +\" from cart..\")\n                            shopping.removeItem(item)\n                    with allure.step(\"Step 6: Verify if correct items are present in the cart\"):\n                        log.info(\"Checking if all the required items are added and removed as expected...\")\n                        if not shopping.validateCartItems(totalItems):\n                            log.error(\"Items in the cart doesn't match the expected items\")\n                            raise AssertionError(\"The shopping items do not match the expected list...\")\n                    with allure.step(\"Step 7: Proceed to checkout and enter the required details\"):\n                        shopping.proceedToCheckout()\n                        log.info(\"Proceeding to checkout..\")\n                        log.info(\"Entering form details..\")\n                        sleep(sleepTime)\n                        shopping.formSubmit(xstr(firstName), xstr(lastName), xstr(PostalCode))\n                    with allure.step(\"Step 8: Verify if the form details are valid\"):\n                        formResult = shopping.validateForm()\n                        if formResult == \"Pass\":\n                            log.info(\"Completing the transaction...\")\n                        else:\n                            log.error(shopping.getErrorText())\n                        try:\n                            assert ExpectedAction == formResult\n                            with allure.step(\"Step 9: Proceed to transaction page and finish shopping\"):\n                                if formResult == \"Pass\":\n                                    sleep(sleepTime)\n                                    shopping.finishShopping()\n                                    with allure.step(\"Step 10: Verify if the shopping is completed\"):\n                                        sleep(sleepTime)\n                                        shoppingResult = shopping.validateShopping()\n                                        if shoppingResult == \"Pass\":\n                                            log.info(\"Shopping completed successfully...\")\n                                        else:\n                                            log.error(\"Shopping is terminated...\")\n>                                           raise AssertionError(\"The expected outcome was not achieved\")\nE                                           AssertionError: The expected outcome was not achieved\n\ntest_cases\\test_shopping.py:96: AssertionError\n\nDuring handling of the above exception, another exception occurred:\n\nsetup_browser = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"11d1f570a57f0d6831d3d76f82ca200f\")>, log = <Logger Login Test (DEBUG)>, tc_id = 'TC_5'\nname = 'error_user', password = 'secret_sauce', expected = 'Pass', addItems = 'Test.allTheThings() T-Shirt (Red), Sauce Labs Onesie', removeItems = None\nfirstName = 'Alex', lastName = 'Smith', PostalCode = 24309, ExpectedAction = 'Pass'\n\n    @allure.feature(\"Shopping functionality\")\n    @allure.story(\"Shopping in the site with valid and invalid operations\")\n    @allure.severity(allure.severity_level.CRITICAL)\n    @pytest.mark.parametrize(\"tc_id, name, password, expected, addItems, removeItems, firstName, lastName, PostalCode, ExpectedAction\", getTestData())\n    def test_shopping(setup_browser, log, tc_id, name, password, expected, addItems, removeItems, firstName, lastName, PostalCode, ExpectedAction):\n        log.info(\"Executing \"+ tc_id + \" with \" + xstr(name) + \" as username and \" + xstr(password) + \" as password in \"+ browserType +\" browser...\" )\n    \n        with allure.step(\"Step 1: Open the browser and navigate to required site\"):\n            driver = setup_browser\n            log.info(\"Starting browser session...\")\n    \n        with allure.step(\"Step 2: Enter the login credentials from test data\"):\n            shopping = CheckoutPage(driver)\n            log.info(\"Entering login credentials...\")\n            allure.attach(f\"Username: {xstr(name)}\", name=\"Username\", attachment_type=allure.attachment_type.TEXT)\n            allure.attach(f\"Password: {xstr(password)}\", name=\"Password\", attachment_type=allure.attachment_type.TEXT)\n            shopping.login(xstr(name), xstr(password))\n            sleep(sleepTime)\n    \n        with allure.step(\"Step 3: Validate the login and capture error message incase of invalid credentials\"):\n            log.info(\"Validating login...\")\n            result = shopping.validatelogin()\n            if result == \"Pass\":\n                log.info(\"Logged in successfully\")\n            else:\n                log.error(shopping.getErrorText())\n            log.info(\"Login Check performed successfully...\")\n    \n        with allure.step(\"Step 4: Add items to the cart in case of successful login\"):\n            try:\n                assert expected == result\n                if result == \"Pass\":\n                    log.info(\"Adding required items to cart..\")\n                    itemsToAdd = xstr(addItems).split(\", \")\n                    itemsToRemove = xstr(removeItems).split(\", \")\n                    totalItems = len(itemsToAdd) - len(itemsToRemove)\n                    for item in itemsToAdd:\n                        sleep(sleepTime)\n                        log.info(\"Adding \"+ item +\" to cart..\")\n                        shopping.addItem(item)\n                    with allure.step(\"Step 5: Proceed to the cart and remove items as per test data\"):\n                        log.info(\"Proceeding to cart..\")\n                        shopping.proceedToCart()\n                        for item in itemsToRemove:\n                            sleep(sleepTime)\n                            log.info(\"Removing \"+ item +\" from cart..\")\n                            shopping.removeItem(item)\n                    with allure.step(\"Step 6: Verify if correct items are present in the cart\"):\n                        log.info(\"Checking if all the required items are added and removed as expected...\")\n                        if not shopping.validateCartItems(totalItems):\n                            log.error(\"Items in the cart doesn't match the expected items\")\n                            raise AssertionError(\"The shopping items do not match the expected list...\")\n                    with allure.step(\"Step 7: Proceed to checkout and enter the required details\"):\n                        shopping.proceedToCheckout()\n                        log.info(\"Proceeding to checkout..\")\n                        log.info(\"Entering form details..\")\n                        sleep(sleepTime)\n                        shopping.formSubmit(xstr(firstName), xstr(lastName), xstr(PostalCode))\n                    with allure.step(\"Step 8: Verify if the form details are valid\"):\n                        formResult = shopping.validateForm()\n                        if formResult == \"Pass\":\n                            log.info(\"Completing the transaction...\")\n                        else:\n                            log.error(shopping.getErrorText())\n                        try:\n                            assert ExpectedAction == formResult\n                            with allure.step(\"Step 9: Proceed to transaction page and finish shopping\"):\n                                if formResult == \"Pass\":\n                                    sleep(sleepTime)\n                                    shopping.finishShopping()\n                                    with allure.step(\"Step 10: Verify if the shopping is completed\"):\n                                        sleep(sleepTime)\n                                        shoppingResult = shopping.validateShopping()\n                                        if shoppingResult == \"Pass\":\n                                            log.info(\"Shopping completed successfully...\")\n                                        else:\n                                            log.error(\"Shopping is terminated...\")\n                                            raise AssertionError(\"The expected outcome was not achieved\")\n                        except Exception as e:\n                            log.error(\"The process did not complete as expected...\"+ str(e))\n>                           pytest.fail(str(e))\nE                           Failed: The expected outcome was not achieved\n\ntest_cases\\test_shopping.py:99: Failed","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":2,"retriesStatusChange":true,"beforeStages":[{"name":"setup_browser","time":{"start":1737225723147,"stop":1737225747144,"duration":23997},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentStep":false,"hasContent":false,"shouldDisplayMessage":false,"attachmentsCount":0},{"name":"second_fixture","time":{"start":1737225723147,"stop":1737225723147,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentStep":false,"hasContent":false,"shouldDisplayMessage":false,"attachmentsCount":0},{"name":"caplog","time":{"start":1737225723147,"stop":1737225723147,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentStep":false,"hasContent":false,"shouldDisplayMessage":false,"attachmentsCount":0},{"name":"log","time":{"start":1737225747144,"stop":1737225747145,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentStep":false,"hasContent":false,"shouldDisplayMessage":false,"attachmentsCount":0}],"testStage":{"status":"failed","statusMessage":"Failed: The expected outcome was not achieved","statusTrace":"setup_browser = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"11d1f570a57f0d6831d3d76f82ca200f\")>, log = <Logger Login Test (DEBUG)>, tc_id = 'TC_5'\nname = 'error_user', password = 'secret_sauce', expected = 'Pass', addItems = 'Test.allTheThings() T-Shirt (Red), Sauce Labs Onesie', removeItems = None\nfirstName = 'Alex', lastName = 'Smith', PostalCode = 24309, ExpectedAction = 'Pass'\n\n    @allure.feature(\"Shopping functionality\")\n    @allure.story(\"Shopping in the site with valid and invalid operations\")\n    @allure.severity(allure.severity_level.CRITICAL)\n    @pytest.mark.parametrize(\"tc_id, name, password, expected, addItems, removeItems, firstName, lastName, PostalCode, ExpectedAction\", getTestData())\n    def test_shopping(setup_browser, log, tc_id, name, password, expected, addItems, removeItems, firstName, lastName, PostalCode, ExpectedAction):\n        log.info(\"Executing \"+ tc_id + \" with \" + xstr(name) + \" as username and \" + xstr(password) + \" as password in \"+ browserType +\" browser...\" )\n    \n        with allure.step(\"Step 1: Open the browser and navigate to required site\"):\n            driver = setup_browser\n            log.info(\"Starting browser session...\")\n    \n        with allure.step(\"Step 2: Enter the login credentials from test data\"):\n            shopping = CheckoutPage(driver)\n            log.info(\"Entering login credentials...\")\n            allure.attach(f\"Username: {xstr(name)}\", name=\"Username\", attachment_type=allure.attachment_type.TEXT)\n            allure.attach(f\"Password: {xstr(password)}\", name=\"Password\", attachment_type=allure.attachment_type.TEXT)\n            shopping.login(xstr(name), xstr(password))\n            sleep(sleepTime)\n    \n        with allure.step(\"Step 3: Validate the login and capture error message incase of invalid credentials\"):\n            log.info(\"Validating login...\")\n            result = shopping.validatelogin()\n            if result == \"Pass\":\n                log.info(\"Logged in successfully\")\n            else:\n                log.error(shopping.getErrorText())\n            log.info(\"Login Check performed successfully...\")\n    \n        with allure.step(\"Step 4: Add items to the cart in case of successful login\"):\n            try:\n                assert expected == result\n                if result == \"Pass\":\n                    log.info(\"Adding required items to cart..\")\n                    itemsToAdd = xstr(addItems).split(\", \")\n                    itemsToRemove = xstr(removeItems).split(\", \")\n                    totalItems = len(itemsToAdd) - len(itemsToRemove)\n                    for item in itemsToAdd:\n                        sleep(sleepTime)\n                        log.info(\"Adding \"+ item +\" to cart..\")\n                        shopping.addItem(item)\n                    with allure.step(\"Step 5: Proceed to the cart and remove items as per test data\"):\n                        log.info(\"Proceeding to cart..\")\n                        shopping.proceedToCart()\n                        for item in itemsToRemove:\n                            sleep(sleepTime)\n                            log.info(\"Removing \"+ item +\" from cart..\")\n                            shopping.removeItem(item)\n                    with allure.step(\"Step 6: Verify if correct items are present in the cart\"):\n                        log.info(\"Checking if all the required items are added and removed as expected...\")\n                        if not shopping.validateCartItems(totalItems):\n                            log.error(\"Items in the cart doesn't match the expected items\")\n                            raise AssertionError(\"The shopping items do not match the expected list...\")\n                    with allure.step(\"Step 7: Proceed to checkout and enter the required details\"):\n                        shopping.proceedToCheckout()\n                        log.info(\"Proceeding to checkout..\")\n                        log.info(\"Entering form details..\")\n                        sleep(sleepTime)\n                        shopping.formSubmit(xstr(firstName), xstr(lastName), xstr(PostalCode))\n                    with allure.step(\"Step 8: Verify if the form details are valid\"):\n                        formResult = shopping.validateForm()\n                        if formResult == \"Pass\":\n                            log.info(\"Completing the transaction...\")\n                        else:\n                            log.error(shopping.getErrorText())\n                        try:\n                            assert ExpectedAction == formResult\n                            with allure.step(\"Step 9: Proceed to transaction page and finish shopping\"):\n                                if formResult == \"Pass\":\n                                    sleep(sleepTime)\n                                    shopping.finishShopping()\n                                    with allure.step(\"Step 10: Verify if the shopping is completed\"):\n                                        sleep(sleepTime)\n                                        shoppingResult = shopping.validateShopping()\n                                        if shoppingResult == \"Pass\":\n                                            log.info(\"Shopping completed successfully...\")\n                                        else:\n                                            log.error(\"Shopping is terminated...\")\n>                                           raise AssertionError(\"The expected outcome was not achieved\")\nE                                           AssertionError: The expected outcome was not achieved\n\ntest_cases\\test_shopping.py:96: AssertionError\n\nDuring handling of the above exception, another exception occurred:\n\nsetup_browser = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"11d1f570a57f0d6831d3d76f82ca200f\")>, log = <Logger Login Test (DEBUG)>, tc_id = 'TC_5'\nname = 'error_user', password = 'secret_sauce', expected = 'Pass', addItems = 'Test.allTheThings() T-Shirt (Red), Sauce Labs Onesie', removeItems = None\nfirstName = 'Alex', lastName = 'Smith', PostalCode = 24309, ExpectedAction = 'Pass'\n\n    @allure.feature(\"Shopping functionality\")\n    @allure.story(\"Shopping in the site with valid and invalid operations\")\n    @allure.severity(allure.severity_level.CRITICAL)\n    @pytest.mark.parametrize(\"tc_id, name, password, expected, addItems, removeItems, firstName, lastName, PostalCode, ExpectedAction\", getTestData())\n    def test_shopping(setup_browser, log, tc_id, name, password, expected, addItems, removeItems, firstName, lastName, PostalCode, ExpectedAction):\n        log.info(\"Executing \"+ tc_id + \" with \" + xstr(name) + \" as username and \" + xstr(password) + \" as password in \"+ browserType +\" browser...\" )\n    \n        with allure.step(\"Step 1: Open the browser and navigate to required site\"):\n            driver = setup_browser\n            log.info(\"Starting browser session...\")\n    \n        with allure.step(\"Step 2: Enter the login credentials from test data\"):\n            shopping = CheckoutPage(driver)\n            log.info(\"Entering login credentials...\")\n            allure.attach(f\"Username: {xstr(name)}\", name=\"Username\", attachment_type=allure.attachment_type.TEXT)\n            allure.attach(f\"Password: {xstr(password)}\", name=\"Password\", attachment_type=allure.attachment_type.TEXT)\n            shopping.login(xstr(name), xstr(password))\n            sleep(sleepTime)\n    \n        with allure.step(\"Step 3: Validate the login and capture error message incase of invalid credentials\"):\n            log.info(\"Validating login...\")\n            result = shopping.validatelogin()\n            if result == \"Pass\":\n                log.info(\"Logged in successfully\")\n            else:\n                log.error(shopping.getErrorText())\n            log.info(\"Login Check performed successfully...\")\n    \n        with allure.step(\"Step 4: Add items to the cart in case of successful login\"):\n            try:\n                assert expected == result\n                if result == \"Pass\":\n                    log.info(\"Adding required items to cart..\")\n                    itemsToAdd = xstr(addItems).split(\", \")\n                    itemsToRemove = xstr(removeItems).split(\", \")\n                    totalItems = len(itemsToAdd) - len(itemsToRemove)\n                    for item in itemsToAdd:\n                        sleep(sleepTime)\n                        log.info(\"Adding \"+ item +\" to cart..\")\n                        shopping.addItem(item)\n                    with allure.step(\"Step 5: Proceed to the cart and remove items as per test data\"):\n                        log.info(\"Proceeding to cart..\")\n                        shopping.proceedToCart()\n                        for item in itemsToRemove:\n                            sleep(sleepTime)\n                            log.info(\"Removing \"+ item +\" from cart..\")\n                            shopping.removeItem(item)\n                    with allure.step(\"Step 6: Verify if correct items are present in the cart\"):\n                        log.info(\"Checking if all the required items are added and removed as expected...\")\n                        if not shopping.validateCartItems(totalItems):\n                            log.error(\"Items in the cart doesn't match the expected items\")\n                            raise AssertionError(\"The shopping items do not match the expected list...\")\n                    with allure.step(\"Step 7: Proceed to checkout and enter the required details\"):\n                        shopping.proceedToCheckout()\n                        log.info(\"Proceeding to checkout..\")\n                        log.info(\"Entering form details..\")\n                        sleep(sleepTime)\n                        shopping.formSubmit(xstr(firstName), xstr(lastName), xstr(PostalCode))\n                    with allure.step(\"Step 8: Verify if the form details are valid\"):\n                        formResult = shopping.validateForm()\n                        if formResult == \"Pass\":\n                            log.info(\"Completing the transaction...\")\n                        else:\n                            log.error(shopping.getErrorText())\n                        try:\n                            assert ExpectedAction == formResult\n                            with allure.step(\"Step 9: Proceed to transaction page and finish shopping\"):\n                                if formResult == \"Pass\":\n                                    sleep(sleepTime)\n                                    shopping.finishShopping()\n                                    with allure.step(\"Step 10: Verify if the shopping is completed\"):\n                                        sleep(sleepTime)\n                                        shoppingResult = shopping.validateShopping()\n                                        if shoppingResult == \"Pass\":\n                                            log.info(\"Shopping completed successfully...\")\n                                        else:\n                                            log.error(\"Shopping is terminated...\")\n                                            raise AssertionError(\"The expected outcome was not achieved\")\n                        except Exception as e:\n                            log.error(\"The process did not complete as expected...\"+ str(e))\n>                           pytest.fail(str(e))\nE                           Failed: The expected outcome was not achieved\n\ntest_cases\\test_shopping.py:99: Failed","steps":[{"name":"Step 1: Open the browser and navigate to required site","time":{"start":1737225747155,"stop":1737225747159,"duration":4},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentStep":false,"hasContent":false,"shouldDisplayMessage":false,"attachmentsCount":0},{"name":"Step 2: Enter the login credentials from test data","time":{"start":1737225747159,"stop":1737225751330,"duration":4171},"status":"passed","steps":[],"attachments":[{"uid":"e420125838c189b0","name":"Username","source":"e420125838c189b0.txt","type":"text/plain","size":20},{"uid":"ea81e8bfbedebc84","name":"Password","source":"ea81e8bfbedebc84.txt","type":"text/plain","size":22}],"parameters":[],"stepsCount":0,"attachmentStep":false,"hasContent":true,"shouldDisplayMessage":false,"attachmentsCount":2},{"name":"Step 3: Validate the login and capture error message incase of invalid credentials","time":{"start":1737225751330,"stop":1737225751347,"duration":17},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentStep":false,"hasContent":false,"shouldDisplayMessage":false,"attachmentsCount":0},{"name":"Step 4: Add items to the cart in case of successful login","time":{"start":1737225751347,"stop":1737225790944,"duration":39597},"status":"failed","statusMessage":"Failed: The expected outcome was not achieved\n","statusTrace":"  File \"D:\\Selenium Practices\\Week 8\\test_cases\\test_shopping.py\", line 99, in test_shopping\n    pytest.fail(str(e))\n    ~~~~~~~~~~~^^^^^^^^\n  File \"C:\\Users\\Jarvis\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\_pytest\\outcomes.py\", line 178, in fail\n    raise Failed(msg=reason, pytrace=pytrace)\n","steps":[{"name":"Step 5: Proceed to the cart and remove items as per test data","time":{"start":1737225758086,"stop":1737225771347,"duration":13261},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentStep":false,"hasContent":false,"shouldDisplayMessage":false,"attachmentsCount":0},{"name":"Step 6: Verify if correct items are present in the cart","time":{"start":1737225771347,"stop":1737225771360,"duration":13},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentStep":false,"hasContent":false,"shouldDisplayMessage":false,"attachmentsCount":0},{"name":"Step 7: Proceed to checkout and enter the required details","time":{"start":1737225771360,"stop":1737225774778,"duration":3418},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentStep":false,"hasContent":false,"shouldDisplayMessage":false,"attachmentsCount":0},{"name":"Step 8: Verify if the form details are valid","time":{"start":1737225774778,"stop":1737225790942,"duration":16164},"status":"failed","statusMessage":"Failed: The expected outcome was not achieved\n","statusTrace":"  File \"D:\\Selenium Practices\\Week 8\\test_cases\\test_shopping.py\", line 99, in test_shopping\n    pytest.fail(str(e))\n    ~~~~~~~~~~~^^^^^^^^\n  File \"C:\\Users\\Jarvis\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\_pytest\\outcomes.py\", line 178, in fail\n    raise Failed(msg=reason, pytrace=pytrace)\n","steps":[{"name":"Step 9: Proceed to transaction page and finish shopping","time":{"start":1737225774799,"stop":1737225790940,"duration":16141},"status":"failed","statusMessage":"AssertionError: The expected outcome was not achieved\n","statusTrace":"  File \"D:\\Selenium Practices\\Week 8\\test_cases\\test_shopping.py\", line 96, in test_shopping\n    raise AssertionError(\"The expected outcome was not achieved\")\n","steps":[{"name":"Step 10: Verify if the shopping is completed","time":{"start":1737225777870,"stop":1737225790939,"duration":13069},"status":"failed","statusMessage":"AssertionError: The expected outcome was not achieved\n","statusTrace":"  File \"D:\\Selenium Practices\\Week 8\\test_cases\\test_shopping.py\", line 96, in test_shopping\n    raise AssertionError(\"The expected outcome was not achieved\")\n","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentStep":false,"hasContent":true,"shouldDisplayMessage":true,"attachmentsCount":0}],"attachments":[],"parameters":[],"stepsCount":1,"attachmentStep":false,"hasContent":true,"shouldDisplayMessage":false,"attachmentsCount":0}],"attachments":[],"parameters":[],"stepsCount":2,"attachmentStep":false,"hasContent":true,"shouldDisplayMessage":true,"attachmentsCount":0}],"attachments":[],"parameters":[],"stepsCount":6,"attachmentStep":false,"hasContent":true,"shouldDisplayMessage":false,"attachmentsCount":0}],"attachments":[{"uid":"628cec74fc18f6ec","name":"log","source":"628cec74fc18f6ec.txt","type":"text/plain","size":1573},{"uid":"dc3c7fbc3ffcb215","name":"stderr","source":"dc3c7fbc3ffcb215.txt","type":"text/plain","size":110400}],"parameters":[],"stepsCount":10,"attachmentStep":false,"hasContent":true,"shouldDisplayMessage":true,"attachmentsCount":4},"afterStages":[{"name":"setup_browser::0","time":{"start":1737225795037,"stop":1737225802173,"duration":7136},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentStep":false,"hasContent":false,"shouldDisplayMessage":false,"attachmentsCount":0},{"name":"second_fixture::0","time":{"start":1737225802174,"stop":1737225802174,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentStep":false,"hasContent":false,"shouldDisplayMessage":false,"attachmentsCount":0},{"name":"caplog::0","time":{"start":1737225802174,"stop":1737225802175,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentStep":false,"hasContent":false,"shouldDisplayMessage":false,"attachmentsCount":0}],"labels":[{"name":"feature","value":"Shopping functionality"},{"name":"severity","value":"critical"},{"name":"story","value":"Shopping in the site with valid and invalid operations"},{"name":"parentSuite","value":"test_cases"},{"name":"suite","value":"test_shopping"},{"name":"host","value":"Jarvis"},{"name":"thread","value":"12192-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"test_cases.test_shopping"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"ExpectedAction","value":"'Pass'"},{"name":"PostalCode","value":"24309"},{"name":"addItems","value":"'Test.allTheThings() T-Shirt (Red), Sauce Labs Onesie'"},{"name":"expected","value":"'Pass'"},{"name":"firstName","value":"'Alex'"},{"name":"lastName","value":"'Smith'"},{"name":"name","value":"'error_user'"},{"name":"password","value":"'secret_sauce'"},{"name":"removeItems","value":"None"},{"name":"tc_id","value":"'TC_5'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"critical","retries":[{"uid":"ddd8d3a44c29cd7d","status":"broken","statusDetails":"TypeError: WebDriver.__init__() got multiple values for argument 'options'","time":{"start":1737225350658,"stop":1737225350658,"duration":0}},{"uid":"ff134c4d86f07ae5","status":"failed","statusDetails":"Failed: The expected outcome was not achieved","time":{"start":1737222884925,"stop":1737222930923,"duration":45998}}],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"tags":[]},"source":"fbbf3752598e93ae.json","parameterValues":["'Pass'","24309","'Test.allTheThings() T-Shirt (Red), Sauce Labs Onesie'","'Pass'","'Alex'","'Smith'","'error_user'","'secret_sauce'","None","'TC_5'"]}