{"uid":"8a0c0ad98f29598f","name":"test_shopping[TC_3-problem_user-secret_sauce-Pass-Sauce Labs Fleece Jacket, Sauce Labs Bolt T-Shirt-Sauce Labs Fleece Jacket-John-Brown-62236-Pass]","fullName":"test_cases.test_shopping#test_shopping","historyId":"3d9aff1505ae3d19846f695607905dab","time":{"start":1737222763258,"stop":1737222798950,"duration":35692},"status":"failed","statusMessage":"Failed: The shopping items do not match the expected list...","statusTrace":"setup_browser = <selenium.webdriver.remote.webdriver.WebDriver (session=\"3a471fdbd3e19f4c89f64331950015bc7b3da44d\")>, log = <Logger Login Test (DEBUG)>, tc_id = 'TC_3'\nname = 'problem_user', password = 'secret_sauce', expected = 'Pass', addItems = 'Sauce Labs Fleece Jacket, Sauce Labs Bolt T-Shirt'\nremoveItems = 'Sauce Labs Fleece Jacket', firstName = 'John', lastName = 'Brown', PostalCode = 62236, ExpectedAction = 'Pass'\n\n    @allure.feature(\"Shopping functionality\")\n    @allure.story(\"Shopping in the site with valid and invalid operations\")\n    @allure.severity(allure.severity_level.CRITICAL)\n    @pytest.mark.parametrize(\"tc_id, name, password, expected, addItems, removeItems, firstName, lastName, PostalCode, ExpectedAction\", getTestData())\n    def test_shopping(setup_browser, log, tc_id, name, password, expected, addItems, removeItems, firstName, lastName, PostalCode, ExpectedAction):\n        log.info(\"Executing \"+ tc_id + \" with \" + xstr(name) + \" as username and \" + xstr(password) + \" as password in \"+ browserType +\" browser...\" )\n    \n        with allure.step(\"Step 1: Open the browser and navigate to required site\"):\n            driver = setup_browser\n            log.info(\"Starting browser session...\")\n    \n        with allure.step(\"Step 2: Enter the login credentials from test data\"):\n            shopping = CheckoutPage(driver)\n            log.info(\"Entering login credentials...\")\n            allure.attach(f\"Username: {xstr(name)}\", name=\"Username\", attachment_type=allure.attachment_type.TEXT)\n            allure.attach(f\"Password: {xstr(password)}\", name=\"Password\", attachment_type=allure.attachment_type.TEXT)\n            shopping.login(xstr(name), xstr(password))\n            sleep(sleepTime)\n    \n        with allure.step(\"Step 3: Validate the login and capture error message incase of invalid credentials\"):\n            log.info(\"Validating login...\")\n            result = shopping.validatelogin()\n            if result == \"Pass\":\n                log.info(\"Logged in successfully\")\n            else:\n                log.error(shopping.getErrorText())\n            log.info(\"Login Check performed successfully...\")\n    \n        with allure.step(\"Step 4: Add items to the cart in case of successful login\"):\n            try:\n                assert expected == result\n                if result == \"Pass\":\n                    log.info(\"Adding required items to cart..\")\n                    itemsToAdd = xstr(addItems).split(\", \")\n                    itemsToRemove = xstr(removeItems).split(\", \")\n                    totalItems = len(itemsToAdd) - len(itemsToRemove)\n                    for item in itemsToAdd:\n                        sleep(sleepTime)\n                        log.info(\"Adding \"+ item +\" to cart..\")\n                        shopping.addItem(item)\n                    with allure.step(\"Step 5: Proceed to the cart and remove items as per test data\"):\n                        log.info(\"Proceeding to cart..\")\n                        shopping.proceedToCart()\n                        for item in itemsToRemove:\n                            sleep(sleepTime)\n                            log.info(\"Removing \"+ item +\" from cart..\")\n                            shopping.removeItem(item)\n                    with allure.step(\"Step 6: Verify if correct items are present in the cart\"):\n                        log.info(\"Checking if all the required items are added and removed as expected...\")\n                        if not shopping.validateCartItems(totalItems):\n                            log.error(\"Items in the cart doesn't match the expected items\")\n>                           raise AssertionError(\"The shopping items do not match the expected list...\")\nE                           AssertionError: The shopping items do not match the expected list...\n\ntest_cases\\test_shopping.py:70: AssertionError\n\nDuring handling of the above exception, another exception occurred:\n\nsetup_browser = <selenium.webdriver.remote.webdriver.WebDriver (session=\"3a471fdbd3e19f4c89f64331950015bc7b3da44d\")>, log = <Logger Login Test (DEBUG)>, tc_id = 'TC_3'\nname = 'problem_user', password = 'secret_sauce', expected = 'Pass', addItems = 'Sauce Labs Fleece Jacket, Sauce Labs Bolt T-Shirt'\nremoveItems = 'Sauce Labs Fleece Jacket', firstName = 'John', lastName = 'Brown', PostalCode = 62236, ExpectedAction = 'Pass'\n\n    @allure.feature(\"Shopping functionality\")\n    @allure.story(\"Shopping in the site with valid and invalid operations\")\n    @allure.severity(allure.severity_level.CRITICAL)\n    @pytest.mark.parametrize(\"tc_id, name, password, expected, addItems, removeItems, firstName, lastName, PostalCode, ExpectedAction\", getTestData())\n    def test_shopping(setup_browser, log, tc_id, name, password, expected, addItems, removeItems, firstName, lastName, PostalCode, ExpectedAction):\n        log.info(\"Executing \"+ tc_id + \" with \" + xstr(name) + \" as username and \" + xstr(password) + \" as password in \"+ browserType +\" browser...\" )\n    \n        with allure.step(\"Step 1: Open the browser and navigate to required site\"):\n            driver = setup_browser\n            log.info(\"Starting browser session...\")\n    \n        with allure.step(\"Step 2: Enter the login credentials from test data\"):\n            shopping = CheckoutPage(driver)\n            log.info(\"Entering login credentials...\")\n            allure.attach(f\"Username: {xstr(name)}\", name=\"Username\", attachment_type=allure.attachment_type.TEXT)\n            allure.attach(f\"Password: {xstr(password)}\", name=\"Password\", attachment_type=allure.attachment_type.TEXT)\n            shopping.login(xstr(name), xstr(password))\n            sleep(sleepTime)\n    \n        with allure.step(\"Step 3: Validate the login and capture error message incase of invalid credentials\"):\n            log.info(\"Validating login...\")\n            result = shopping.validatelogin()\n            if result == \"Pass\":\n                log.info(\"Logged in successfully\")\n            else:\n                log.error(shopping.getErrorText())\n            log.info(\"Login Check performed successfully...\")\n    \n        with allure.step(\"Step 4: Add items to the cart in case of successful login\"):\n            try:\n                assert expected == result\n                if result == \"Pass\":\n                    log.info(\"Adding required items to cart..\")\n                    itemsToAdd = xstr(addItems).split(\", \")\n                    itemsToRemove = xstr(removeItems).split(\", \")\n                    totalItems = len(itemsToAdd) - len(itemsToRemove)\n                    for item in itemsToAdd:\n                        sleep(sleepTime)\n                        log.info(\"Adding \"+ item +\" to cart..\")\n                        shopping.addItem(item)\n                    with allure.step(\"Step 5: Proceed to the cart and remove items as per test data\"):\n                        log.info(\"Proceeding to cart..\")\n                        shopping.proceedToCart()\n                        for item in itemsToRemove:\n                            sleep(sleepTime)\n                            log.info(\"Removing \"+ item +\" from cart..\")\n                            shopping.removeItem(item)\n                    with allure.step(\"Step 6: Verify if correct items are present in the cart\"):\n                        log.info(\"Checking if all the required items are added and removed as expected...\")\n                        if not shopping.validateCartItems(totalItems):\n                            log.error(\"Items in the cart doesn't match the expected items\")\n                            raise AssertionError(\"The shopping items do not match the expected list...\")\n                    with allure.step(\"Step 7: Proceed to checkout and enter the required details\"):\n                        shopping.proceedToCheckout()\n                        log.info(\"Proceeding to checkout..\")\n                        log.info(\"Entering form details..\")\n                        sleep(sleepTime)\n                        shopping.formSubmit(xstr(firstName), xstr(lastName), xstr(PostalCode))\n                    with allure.step(\"Step 8: Verify if the form details are valid\"):\n                        formResult = shopping.validateForm()\n                        if formResult == \"Pass\":\n                            log.info(\"Completing the transaction...\")\n                        else:\n                            log.error(shopping.getErrorText())\n                        try:\n                            assert ExpectedAction == formResult\n                            with allure.step(\"Step 9: Proceed to transaction page and finish shopping\"):\n                                if formResult == \"Pass\":\n                                    sleep(sleepTime)\n                                    shopping.finishShopping()\n                                    with allure.step(\"Step 10: Verify if the shopping is completed\"):\n                                        sleep(sleepTime)\n                                        shoppingResult = shopping.validateShopping()\n                                        if shoppingResult == \"Pass\":\n                                            log.info(\"Shopping completed successfully...\")\n                                        else:\n                                            log.error(\"Shopping is terminated...\")\n                                            raise AssertionError(\"The expected outcome was not achieved\")\n                        except Exception as e:\n                            log.error(\"The process did not complete as expected...\"+ str(e))\n                            pytest.fail(str(e))\n            except Exception as e:\n                log.error(\"An error was encountered during the process...\"+ str(e))\n>               pytest.fail(str(e))\nE               Failed: The shopping items do not match the expected list...\n\ntest_cases\\test_shopping.py:102: Failed","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"second_fixture","time":{"start":1737222748689,"stop":1737222748689,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentStep":false,"hasContent":false,"shouldDisplayMessage":false,"attachmentsCount":0},{"name":"caplog","time":{"start":1737222748689,"stop":1737222748689,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentStep":false,"hasContent":false,"shouldDisplayMessage":false,"attachmentsCount":0},{"name":"setup_browser","time":{"start":1737222748689,"stop":1737222763256,"duration":14567},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentStep":false,"hasContent":false,"shouldDisplayMessage":false,"attachmentsCount":0},{"name":"log","time":{"start":1737222763256,"stop":1737222763256,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentStep":false,"hasContent":false,"shouldDisplayMessage":false,"attachmentsCount":0}],"testStage":{"status":"failed","statusMessage":"Failed: The shopping items do not match the expected list...","statusTrace":"setup_browser = <selenium.webdriver.remote.webdriver.WebDriver (session=\"3a471fdbd3e19f4c89f64331950015bc7b3da44d\")>, log = <Logger Login Test (DEBUG)>, tc_id = 'TC_3'\nname = 'problem_user', password = 'secret_sauce', expected = 'Pass', addItems = 'Sauce Labs Fleece Jacket, Sauce Labs Bolt T-Shirt'\nremoveItems = 'Sauce Labs Fleece Jacket', firstName = 'John', lastName = 'Brown', PostalCode = 62236, ExpectedAction = 'Pass'\n\n    @allure.feature(\"Shopping functionality\")\n    @allure.story(\"Shopping in the site with valid and invalid operations\")\n    @allure.severity(allure.severity_level.CRITICAL)\n    @pytest.mark.parametrize(\"tc_id, name, password, expected, addItems, removeItems, firstName, lastName, PostalCode, ExpectedAction\", getTestData())\n    def test_shopping(setup_browser, log, tc_id, name, password, expected, addItems, removeItems, firstName, lastName, PostalCode, ExpectedAction):\n        log.info(\"Executing \"+ tc_id + \" with \" + xstr(name) + \" as username and \" + xstr(password) + \" as password in \"+ browserType +\" browser...\" )\n    \n        with allure.step(\"Step 1: Open the browser and navigate to required site\"):\n            driver = setup_browser\n            log.info(\"Starting browser session...\")\n    \n        with allure.step(\"Step 2: Enter the login credentials from test data\"):\n            shopping = CheckoutPage(driver)\n            log.info(\"Entering login credentials...\")\n            allure.attach(f\"Username: {xstr(name)}\", name=\"Username\", attachment_type=allure.attachment_type.TEXT)\n            allure.attach(f\"Password: {xstr(password)}\", name=\"Password\", attachment_type=allure.attachment_type.TEXT)\n            shopping.login(xstr(name), xstr(password))\n            sleep(sleepTime)\n    \n        with allure.step(\"Step 3: Validate the login and capture error message incase of invalid credentials\"):\n            log.info(\"Validating login...\")\n            result = shopping.validatelogin()\n            if result == \"Pass\":\n                log.info(\"Logged in successfully\")\n            else:\n                log.error(shopping.getErrorText())\n            log.info(\"Login Check performed successfully...\")\n    \n        with allure.step(\"Step 4: Add items to the cart in case of successful login\"):\n            try:\n                assert expected == result\n                if result == \"Pass\":\n                    log.info(\"Adding required items to cart..\")\n                    itemsToAdd = xstr(addItems).split(\", \")\n                    itemsToRemove = xstr(removeItems).split(\", \")\n                    totalItems = len(itemsToAdd) - len(itemsToRemove)\n                    for item in itemsToAdd:\n                        sleep(sleepTime)\n                        log.info(\"Adding \"+ item +\" to cart..\")\n                        shopping.addItem(item)\n                    with allure.step(\"Step 5: Proceed to the cart and remove items as per test data\"):\n                        log.info(\"Proceeding to cart..\")\n                        shopping.proceedToCart()\n                        for item in itemsToRemove:\n                            sleep(sleepTime)\n                            log.info(\"Removing \"+ item +\" from cart..\")\n                            shopping.removeItem(item)\n                    with allure.step(\"Step 6: Verify if correct items are present in the cart\"):\n                        log.info(\"Checking if all the required items are added and removed as expected...\")\n                        if not shopping.validateCartItems(totalItems):\n                            log.error(\"Items in the cart doesn't match the expected items\")\n>                           raise AssertionError(\"The shopping items do not match the expected list...\")\nE                           AssertionError: The shopping items do not match the expected list...\n\ntest_cases\\test_shopping.py:70: AssertionError\n\nDuring handling of the above exception, another exception occurred:\n\nsetup_browser = <selenium.webdriver.remote.webdriver.WebDriver (session=\"3a471fdbd3e19f4c89f64331950015bc7b3da44d\")>, log = <Logger Login Test (DEBUG)>, tc_id = 'TC_3'\nname = 'problem_user', password = 'secret_sauce', expected = 'Pass', addItems = 'Sauce Labs Fleece Jacket, Sauce Labs Bolt T-Shirt'\nremoveItems = 'Sauce Labs Fleece Jacket', firstName = 'John', lastName = 'Brown', PostalCode = 62236, ExpectedAction = 'Pass'\n\n    @allure.feature(\"Shopping functionality\")\n    @allure.story(\"Shopping in the site with valid and invalid operations\")\n    @allure.severity(allure.severity_level.CRITICAL)\n    @pytest.mark.parametrize(\"tc_id, name, password, expected, addItems, removeItems, firstName, lastName, PostalCode, ExpectedAction\", getTestData())\n    def test_shopping(setup_browser, log, tc_id, name, password, expected, addItems, removeItems, firstName, lastName, PostalCode, ExpectedAction):\n        log.info(\"Executing \"+ tc_id + \" with \" + xstr(name) + \" as username and \" + xstr(password) + \" as password in \"+ browserType +\" browser...\" )\n    \n        with allure.step(\"Step 1: Open the browser and navigate to required site\"):\n            driver = setup_browser\n            log.info(\"Starting browser session...\")\n    \n        with allure.step(\"Step 2: Enter the login credentials from test data\"):\n            shopping = CheckoutPage(driver)\n            log.info(\"Entering login credentials...\")\n            allure.attach(f\"Username: {xstr(name)}\", name=\"Username\", attachment_type=allure.attachment_type.TEXT)\n            allure.attach(f\"Password: {xstr(password)}\", name=\"Password\", attachment_type=allure.attachment_type.TEXT)\n            shopping.login(xstr(name), xstr(password))\n            sleep(sleepTime)\n    \n        with allure.step(\"Step 3: Validate the login and capture error message incase of invalid credentials\"):\n            log.info(\"Validating login...\")\n            result = shopping.validatelogin()\n            if result == \"Pass\":\n                log.info(\"Logged in successfully\")\n            else:\n                log.error(shopping.getErrorText())\n            log.info(\"Login Check performed successfully...\")\n    \n        with allure.step(\"Step 4: Add items to the cart in case of successful login\"):\n            try:\n                assert expected == result\n                if result == \"Pass\":\n                    log.info(\"Adding required items to cart..\")\n                    itemsToAdd = xstr(addItems).split(\", \")\n                    itemsToRemove = xstr(removeItems).split(\", \")\n                    totalItems = len(itemsToAdd) - len(itemsToRemove)\n                    for item in itemsToAdd:\n                        sleep(sleepTime)\n                        log.info(\"Adding \"+ item +\" to cart..\")\n                        shopping.addItem(item)\n                    with allure.step(\"Step 5: Proceed to the cart and remove items as per test data\"):\n                        log.info(\"Proceeding to cart..\")\n                        shopping.proceedToCart()\n                        for item in itemsToRemove:\n                            sleep(sleepTime)\n                            log.info(\"Removing \"+ item +\" from cart..\")\n                            shopping.removeItem(item)\n                    with allure.step(\"Step 6: Verify if correct items are present in the cart\"):\n                        log.info(\"Checking if all the required items are added and removed as expected...\")\n                        if not shopping.validateCartItems(totalItems):\n                            log.error(\"Items in the cart doesn't match the expected items\")\n                            raise AssertionError(\"The shopping items do not match the expected list...\")\n                    with allure.step(\"Step 7: Proceed to checkout and enter the required details\"):\n                        shopping.proceedToCheckout()\n                        log.info(\"Proceeding to checkout..\")\n                        log.info(\"Entering form details..\")\n                        sleep(sleepTime)\n                        shopping.formSubmit(xstr(firstName), xstr(lastName), xstr(PostalCode))\n                    with allure.step(\"Step 8: Verify if the form details are valid\"):\n                        formResult = shopping.validateForm()\n                        if formResult == \"Pass\":\n                            log.info(\"Completing the transaction...\")\n                        else:\n                            log.error(shopping.getErrorText())\n                        try:\n                            assert ExpectedAction == formResult\n                            with allure.step(\"Step 9: Proceed to transaction page and finish shopping\"):\n                                if formResult == \"Pass\":\n                                    sleep(sleepTime)\n                                    shopping.finishShopping()\n                                    with allure.step(\"Step 10: Verify if the shopping is completed\"):\n                                        sleep(sleepTime)\n                                        shoppingResult = shopping.validateShopping()\n                                        if shoppingResult == \"Pass\":\n                                            log.info(\"Shopping completed successfully...\")\n                                        else:\n                                            log.error(\"Shopping is terminated...\")\n                                            raise AssertionError(\"The expected outcome was not achieved\")\n                        except Exception as e:\n                            log.error(\"The process did not complete as expected...\"+ str(e))\n                            pytest.fail(str(e))\n            except Exception as e:\n                log.error(\"An error was encountered during the process...\"+ str(e))\n>               pytest.fail(str(e))\nE               Failed: The shopping items do not match the expected list...\n\ntest_cases\\test_shopping.py:102: Failed","steps":[{"name":"Step 1: Open the browser and navigate to required site","time":{"start":1737222763260,"stop":1737222763263,"duration":3},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentStep":false,"hasContent":false,"shouldDisplayMessage":false,"attachmentsCount":0},{"name":"Step 2: Enter the login credentials from test data","time":{"start":1737222763263,"stop":1737222768097,"duration":4834},"status":"passed","steps":[],"attachments":[{"uid":"18a58b7135a35e0c","name":"Username","source":"18a58b7135a35e0c.txt","type":"text/plain","size":22},{"uid":"ef9e1e279d909e09","name":"Password","source":"ef9e1e279d909e09.txt","type":"text/plain","size":22}],"parameters":[],"stepsCount":0,"attachmentStep":false,"hasContent":true,"shouldDisplayMessage":false,"attachmentsCount":2},{"name":"Step 3: Validate the login and capture error message incase of invalid credentials","time":{"start":1737222768098,"stop":1737222768182,"duration":84},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentStep":false,"hasContent":false,"shouldDisplayMessage":false,"attachmentsCount":0},{"name":"Step 4: Add items to the cart in case of successful login","time":{"start":1737222768182,"stop":1737222798948,"duration":30766},"status":"failed","statusMessage":"Failed: The shopping items do not match the expected list...\n","statusTrace":"  File \"D:\\Selenium Practices\\Week 8\\test_cases\\test_shopping.py\", line 102, in test_shopping\n    pytest.fail(str(e))\n    ~~~~~~~~~~~^^^^^^^^\n  File \"C:\\Users\\Jarvis\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\_pytest\\outcomes.py\", line 178, in fail\n    raise Failed(msg=reason, pytrace=pytrace)\n","steps":[{"name":"Step 5: Proceed to the cart and remove items as per test data","time":{"start":1737222775283,"stop":1737222788863,"duration":13580},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentStep":false,"hasContent":false,"shouldDisplayMessage":false,"attachmentsCount":0},{"name":"Step 6: Verify if correct items are present in the cart","time":{"start":1737222788863,"stop":1737222798937,"duration":10074},"status":"failed","statusMessage":"AssertionError: The shopping items do not match the expected list...\n","statusTrace":"  File \"D:\\Selenium Practices\\Week 8\\test_cases\\test_shopping.py\", line 70, in test_shopping\n    raise AssertionError(\"The shopping items do not match the expected list...\")\n","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentStep":false,"hasContent":true,"shouldDisplayMessage":true,"attachmentsCount":0}],"attachments":[],"parameters":[],"stepsCount":2,"attachmentStep":false,"hasContent":true,"shouldDisplayMessage":true,"attachmentsCount":0}],"attachments":[{"uid":"9c3b0ff1224f65a1","name":"log","source":"9c3b0ff1224f65a1.txt","type":"text/plain","size":1413},{"uid":"96079b5e970d3dec","name":"stderr","source":"96079b5e970d3dec.txt","type":"text/plain","size":92421}],"parameters":[],"stepsCount":6,"attachmentStep":false,"hasContent":true,"shouldDisplayMessage":true,"attachmentsCount":4},"afterStages":[{"name":"setup_browser::0","time":{"start":1737222799205,"stop":1737222805549,"duration":6344},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentStep":false,"hasContent":false,"shouldDisplayMessage":false,"attachmentsCount":0},{"name":"second_fixture::0","time":{"start":1737222805550,"stop":1737222805550,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentStep":false,"hasContent":false,"shouldDisplayMessage":false,"attachmentsCount":0},{"name":"caplog::0","time":{"start":1737222805550,"stop":1737222805550,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentStep":false,"hasContent":false,"shouldDisplayMessage":false,"attachmentsCount":0}],"labels":[{"name":"feature","value":"Shopping functionality"},{"name":"severity","value":"critical"},{"name":"story","value":"Shopping in the site with valid and invalid operations"},{"name":"parentSuite","value":"test_cases"},{"name":"suite","value":"test_shopping"},{"name":"host","value":"Jarvis"},{"name":"thread","value":"14804-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"test_cases.test_shopping"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"ExpectedAction","value":"'Pass'"},{"name":"PostalCode","value":"62236"},{"name":"addItems","value":"'Sauce Labs Fleece Jacket, Sauce Labs Bolt T-Shirt'"},{"name":"expected","value":"'Pass'"},{"name":"firstName","value":"'John'"},{"name":"lastName","value":"'Brown'"},{"name":"name","value":"'problem_user'"},{"name":"password","value":"'secret_sauce'"},{"name":"removeItems","value":"'Sauce Labs Fleece Jacket'"},{"name":"tc_id","value":"'TC_3'"}],"links":[],"hidden":true,"retry":true,"extra":{"categories":[],"tags":[]},"source":"8a0c0ad98f29598f.json","parameterValues":["'Pass'","62236","'Sauce Labs Fleece Jacket, Sauce Labs Bolt T-Shirt'","'Pass'","'John'","'Brown'","'problem_user'","'secret_sauce'","'Sauce Labs Fleece Jacket'","'TC_3'"]}